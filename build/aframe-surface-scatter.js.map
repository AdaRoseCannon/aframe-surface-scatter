{"version":3,"file":"aframe-surface-scatter.js","sources":["../node_modules/three/examples/jsm/math/MeshSurfaceSampler.js","../src/aframe-surface-scatter.js"],"sourcesContent":["import {\n\tTriangle,\n\tVector3\n} from 'three';\n\n/**\n * Utility class for sampling weighted random points on the surface of a mesh.\n *\n * Building the sampler is a one-time O(n) operation. Once built, any number of\n * random samples may be selected in O(logn) time. Memory usage is O(n).\n *\n * References:\n * - http://www.joesfer.com/?p=84\n * - https://stackoverflow.com/a/4322940/1314762\n */\n\nconst _face = new Triangle();\nconst _color = new Vector3();\n\nclass MeshSurfaceSampler {\n\n\tconstructor( mesh ) {\n\n\t\tlet geometry = mesh.geometry;\n\n\t\tif ( ! geometry.isBufferGeometry || geometry.attributes.position.itemSize !== 3 ) {\n\n\t\t\tthrow new Error( 'THREE.MeshSurfaceSampler: Requires BufferGeometry triangle mesh.' );\n\n\t\t}\n\n\t\tif ( geometry.index ) {\n\n\t\t\tconsole.warn( 'THREE.MeshSurfaceSampler: Converting geometry to non-indexed BufferGeometry.' );\n\n\t\t\tgeometry = geometry.toNonIndexed();\n\n\t\t}\n\n\t\tthis.geometry = geometry;\n\t\tthis.randomFunction = Math.random;\n\n\t\tthis.positionAttribute = this.geometry.getAttribute( 'position' );\n\t\tthis.colorAttribute = this.geometry.getAttribute( 'color' );\n\t\tthis.weightAttribute = null;\n\n\t\tthis.distribution = null;\n\n\t}\n\n\tsetWeightAttribute( name ) {\n\n\t\tthis.weightAttribute = name ? this.geometry.getAttribute( name ) : null;\n\n\t\treturn this;\n\n\t}\n\n\tbuild() {\n\n\t\tconst positionAttribute = this.positionAttribute;\n\t\tconst weightAttribute = this.weightAttribute;\n\n\t\tconst faceWeights = new Float32Array( positionAttribute.count / 3 );\n\n\t\t// Accumulate weights for each mesh face.\n\n\t\tfor ( let i = 0; i < positionAttribute.count; i += 3 ) {\n\n\t\t\tlet faceWeight = 1;\n\n\t\t\tif ( weightAttribute ) {\n\n\t\t\t\tfaceWeight = weightAttribute.getX( i )\n\t\t\t\t\t+ weightAttribute.getX( i + 1 )\n\t\t\t\t\t+ weightAttribute.getX( i + 2 );\n\n\t\t\t}\n\n\t\t\t_face.a.fromBufferAttribute( positionAttribute, i );\n\t\t\t_face.b.fromBufferAttribute( positionAttribute, i + 1 );\n\t\t\t_face.c.fromBufferAttribute( positionAttribute, i + 2 );\n\t\t\tfaceWeight *= _face.getArea();\n\n\t\t\tfaceWeights[ i / 3 ] = faceWeight;\n\n\t\t}\n\n\t\t// Store cumulative total face weights in an array, where weight index\n\t\t// corresponds to face index.\n\n\t\tthis.distribution = new Float32Array( positionAttribute.count / 3 );\n\n\t\tlet cumulativeTotal = 0;\n\n\t\tfor ( let i = 0; i < faceWeights.length; i ++ ) {\n\n\t\t\tcumulativeTotal += faceWeights[ i ];\n\n\t\t\tthis.distribution[ i ] = cumulativeTotal;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetRandomGenerator( randomFunction ) {\n\n\t\tthis.randomFunction = randomFunction;\n\t\treturn this;\n\n\t}\n\n\tsample( targetPosition, targetNormal, targetColor ) {\n\n\t\tconst cumulativeTotal = this.distribution[ this.distribution.length - 1 ];\n\n\t\tconst faceIndex = this.binarySearch( this.randomFunction() * cumulativeTotal );\n\n\t\treturn this.sampleFace( faceIndex, targetPosition, targetNormal, targetColor );\n\n\t}\n\n\tbinarySearch( x ) {\n\n\t\tconst dist = this.distribution;\n\t\tlet start = 0;\n\t\tlet end = dist.length - 1;\n\n\t\tlet index = - 1;\n\n\t\twhile ( start <= end ) {\n\n\t\t\tconst mid = Math.ceil( ( start + end ) / 2 );\n\n\t\t\tif ( mid === 0 || dist[ mid - 1 ] <= x && dist[ mid ] > x ) {\n\n\t\t\t\tindex = mid;\n\n\t\t\t\tbreak;\n\n\t\t\t} else if ( x < dist[ mid ] ) {\n\n\t\t\t\tend = mid - 1;\n\n\t\t\t} else {\n\n\t\t\t\tstart = mid + 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn index;\n\n\t}\n\n\tsampleFace( faceIndex, targetPosition, targetNormal, targetColor ) {\n\n\t\tlet u = this.randomFunction();\n\t\tlet v = this.randomFunction();\n\n\t\tif ( u + v > 1 ) {\n\n\t\t\tu = 1 - u;\n\t\t\tv = 1 - v;\n\n\t\t}\n\n\t\t_face.a.fromBufferAttribute( this.positionAttribute, faceIndex * 3 );\n\t\t_face.b.fromBufferAttribute( this.positionAttribute, faceIndex * 3 + 1 );\n\t\t_face.c.fromBufferAttribute( this.positionAttribute, faceIndex * 3 + 2 );\n\n\t\ttargetPosition\n\t\t\t.set( 0, 0, 0 )\n\t\t\t.addScaledVector( _face.a, u )\n\t\t\t.addScaledVector( _face.b, v )\n\t\t\t.addScaledVector( _face.c, 1 - ( u + v ) );\n\n\t\tif ( targetNormal !== undefined ) {\n\n\t\t\t_face.getNormal( targetNormal );\n\n\t\t}\n\n\t\tif ( targetColor !== undefined && this.colorAttribute !== undefined ) {\n\n\t\t\t_face.a.fromBufferAttribute( this.colorAttribute, faceIndex * 3 );\n\t\t\t_face.b.fromBufferAttribute( this.colorAttribute, faceIndex * 3 + 1 );\n\t\t\t_face.c.fromBufferAttribute( this.colorAttribute, faceIndex * 3 + 2 );\n\n\t\t\t_color\n\t\t\t\t.set( 0, 0, 0 )\n\t\t\t\t.addScaledVector( _face.a, u )\n\t\t\t\t.addScaledVector( _face.b, v )\n\t\t\t\t.addScaledVector( _face.c, 1 - ( u + v ) );\n\n\t\t\ttargetColor.r = _color.x;\n\t\t\ttargetColor.g = _color.y;\n\t\t\ttargetColor.b = _color.z;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { MeshSurfaceSampler };\n","/* jshint esversion: 9 */\n/* For dealing with covering one object in another curves */\n/* global THREE, AFRAME */\n\nimport { MeshSurfaceSampler } from 'three/examples/jsm/math/MeshSurfaceSampler.js';\n\nconst schema = {\n\tobject: {\n\t\ttype: 'selector'\n\t},\n\tcount: {\n\t\tdefault: 128\n\t},\n\tweightAttribute: {\n\t\tdefault: ''\n\t},\n\tscale: {\n\t\ttype: 'vec3',\n\t\tdefault: new THREE.Vector3(1,1,1)\n\t},\n\tscaleJitter: {\n\t\ttype: 'vec3',\n\t\tdefault: new THREE.Vector3()\n\t},\n\tuniformJitter: {\n\t\tdefault: true\n\t}\n};\n\ndocumentation:\n(function () {\n\tschema.object.description = `Object to place on the surface of this object`;\n\tschema.count.description = `Amount of objects`\n\tschema.weightAttribute.description = `Specifies a vertex attribute to be used as a weight when sampling from the surface. Faces with higher weights are more likely to be sampled, and those with weights of zero will not be sampled at all. For vector attributes, only .x is used in sampling. If no weight attribute is selected, sampling is randomly distributed by area.`;\n\tschema.scale.description = `Amount to scale the objects by`;\n\tschema.scaleJitter.description = `Add randomness to the scaling`;\n\tschema.uniformJitter.description = `Scale x,y,z together (true) or each independently (false)`;\n}());\n\nconst _position = new THREE.Vector3();\nconst up = new THREE.Vector3(0,1,0);\nconst _quaternion = new THREE.Quaternion();\nconst _normal = new THREE.Vector3();\nconst _scale = new THREE.Vector3(1,1,1);\nconst _matrix = new THREE.Matrix4();\nAFRAME.registerComponent('surface-scatter', {\n\tschema,\n\tmultiple: true,\n\tdescription: `This component uses instancing to cover one object in another.`,\n\tinit() {\n\t\tthis.instance = [];\n\t\tthis.update = this.update.bind(this);\n\t\tthis.buildSampler = this.buildSampler.bind(this);\n\t\tthis.el.addEventListener('object3dset', this.buildSampler);\n\t\tthis.buildSampler();\n\t},\n\tbuildSampler() {\n\t\tconst geometries = [];\n\t\tthis.el.object3D.traverse(function (object) {\n\t\t\tif (!object.isInstancedMesh && object.geometry) {\n\t\t\t\tgeometries.push(object.geometry);\n\t\t\t}\n\t\t});\n\t\tif (!geometries.length) return;\n\n\t\tthis.sampler = new MeshSurfaceSampler({\n\t\t\tgeometry: THREE.BufferGeometryUtils.mergeBufferGeometries(geometries)\n\t\t});\n\t\tif (this.data.weightAttribute) {\n\t\t\tthis.sampler.setWeightAttribute( this.data.weightAttribute );\n\t\t}\n\t\tthis.sampler.build();\n\t\tthis.resample();\n\t},\n\tresample() {\n\t\tif (!this.sampler || !this.scales) return;\n\n\t\t// Sample randomly from the surface, creating an instance of the sample\n\t\t// geometry at each sample point.\n\t\tfor ( let i = 0; i < this.data.count; i ++ ) {\n\n\t\t\tthis.sampler.sample( _position, _normal );\n\t\t\t_quaternion.setFromUnitVectors(up, _normal);\n\t\t\t_scale.fromArray(this.scales[i]);\n\t\t\t_matrix.compose(_position, _quaternion, _scale);\n\t\t\tfor (const ins of this.instance) {\n\t\t\t\tins.setMatrixAt( i, _matrix );\n\t\t\t}\n\t\t}\n\n\t\tfor (const ins of this.instance) {\n\t\t\tins.instanceMatrix.needsUpdate = true;\n\t\t}\n\t},\n\tupdate(oldDetails) {\n\t\tconst data = this.data;\n\t\tconst instances = this.instance;\n\n\t\tthis.scales = [];\n\t\tfor (let i=0;i<this.data.count;i++) {\n\t\t\tconst uniformRandom = Math.random();\n\t\t\tthis.scales[i] = [\n\t\t\t\tthis.data.scale.x + (this.data.uniformJitter ? uniformRandom : Math.random()) * this.data.scaleJitter.x,\n\t\t\t\tthis.data.scale.y + (this.data.uniformJitter ? uniformRandom : Math.random()) * this.data.scaleJitter.y,\n\t\t\t\tthis.data.scale.z + (this.data.uniformJitter ? uniformRandom : Math.random()) * this.data.scaleJitter.z,\n\t\t\t]\n\t\t}\n\n\t\tif (oldDetails.object) oldDetails.object.removeEventListener('object3dset', this.update);\n\t\tdata.object.addEventListener('object3dset', this.update);\n\n\t\tconst group = new THREE.Group();\n\t\tif (this.el.getObject3D('instances')) {\n\t\t\tthis.el.removeObject3D('instances');\n\t\t}\n\t\tinstances.splice(0);\n\t\tif (data.object) {\n\t\t\tdata.object.object3D.traverse(function (object) {\n\t\t\t\tif (object.geometry && object.material) {\n\t\t\t\t\tconst instance = new THREE.InstancedMesh(object.geometry, object.material, data.count);\n\t\t\t\t\tinstances.push(instance);\n\t\t\t\t\tgroup.add(instance);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis.el.setObject3D('instances', group);\n\t\tthis.resample();\n\t},\n\tremove() {\n\t\tthis.el.removeObject3D('instances');\n\t\tthis.el.removeEventListener('object3dset', this.resample);\n\t\tthis.data.object.removeEventListener('object3dset', this.update);\n\t}\n});\n"],"names":["Triangle","Vector3"],"mappings":"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"}